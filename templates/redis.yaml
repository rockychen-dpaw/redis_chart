{{- $workloads := 0 }}
{{- range $i,$workload := $.Values.redis.workloads }}
    {{- $workloads = add $workloads 1}}
{{- end }}
{{- $workload_name := $.Release.Name }}
{{- $conf_workload_name := "redis" }}
{{- $conf_name := "redis" }}
{{- $workload_index := 0 }}
{{- $node_index := 0 }}
{{- $node := 0 }}
{{- $ports := list }}
{{- $port := 0 }}
{{- $ports_len := 0 }}
{{- $redis_conf := (get $.Values.redis "redis.conf") | default dict  }}
{{- $cluster_enabled :=  false }}
{{- $start_port := $.Values.redis.port | default 6379 |int }}
{{- $servers := $.Values.redis.servers | default 1 | int }}
{{- $end_port := add $start_port $servers | int  }}
{{- $redisport_conf := dict }}
{{- $redisserver_conf := dict }}
{{- $save := "\"\"" }}
{{- $appendonly := "no" }}
{{- $cluster_enabled :=  false }}
{{- $readinessProbe :=  $.Values.redis.readinessProbe | default dict }}
{{- $livenessProbe :=  $.Values.redis.livenessProbe | default dict }}
{{- $has_storage := and $.Values.redis.volume $.Values.redis.volume.storage  }}
{{- $replicas := $.Values.redis.replicas | default 1 | int }}
{{- $cluster_groups := dict }}
{{- $cluster_masters := dict }}
{{- $nodes_len := 0 }}
{{- $cluster_groups_len := 0 }}
{{- $cluster_node := "" }}
{{- if eq $replicas 1 }}
{{- range $i,$cluster := $.Values.redis.redisClusters | default list }}
    {{- $nodes_len = 0 }}
    {{- range $j,$node := $cluster.servers }}
        {{- $nodes_len = add $nodes_len 1 }}
    {{- end }}
    {{- $cluster_groups_len = div $nodes_len (add $cluster.clusterReplicas 1 ) | int }}
    #add selector for cluster groups
    {{- range $j,$group_index := until $cluster_groups_len }}
        {{- range $k,$replica_index := until (add $cluster.clusterReplicas 1 | int) }}
            {{- $cluster_node = index $cluster.servers (add $group_index (mul $replica_index $cluster_groups_len)) }}
            #remove the port 
            {{- $cluster_node = index (regexSplit ":" $cluster_node -1) 0 }}
            {{- if contains "-" $cluster_node }}
                #remove the replica index
                {{- $cluster_node = index (regexSplit "-" $cluster_node -1) 0 }}
            {{- end }}
            #replace 'redis' with Release.Name
            {{- $cluster_node = print $.Release.Name (trimPrefix "redis" $cluster_node) }}
            {{- if not (hasKey $cluster_groups $cluster_node) }}
                {{- set $cluster_groups $cluster_node dict }}
                {{- set (get $cluster_groups $cluster_node) (print $.Release.Name ".rediscluster." $cluster.name ".group." $group_index )  (print $cluster.name "-group-" $group_index )}}
            {{- end }}
        {{- end }}
    {{- end }}
    #add selector for cluster master
    {{- range $j,$node := slice $cluster.servers 0 $cluster_groups_len }}
        #remove the port 
        {{- $cluster_node = index (regexSplit ":" $node -1) 0 }}
        {{- if contains "-" $cluster_node }}
            #remove the replica index
            {{- $cluster_node = index (regexSplit "-" $cluster_node -1) 0 }}
        {{- end }}
        #replace 'redis' with Release.Name
        {{- $cluster_node = print $.Release.Name (trimPrefix "redis" $cluster_node) }}
        {{- if not (hasKey $cluster_masters $cluster_node) }}
            {{- set $cluster_masters $cluster_node dict }}
            {{- set (get $cluster_masters $cluster_node) (print $.Release.Name ".rediscluster." $cluster.name ".master" )  (print $cluster.name "-master" )}}
        {{- end }}
    {{- end }}
{{- end }}
{{- end }}
{{- range $i,$workload := $.Values.redis.workloads }}
    {{- $workload_index = add $i 1 }}
    {{- if le $workloads 1 }}
        {{- $workload_name = $.Release.Name }}
        {{- $conf_workload_name = "redis" }}
    {{- else }}
---
        {{- if le $workloads 9 }}
            {{- $workload_name = print $.Release.Name $workload_index }}
            {{- $conf_workload_name = print "redis" $workload_index }}
        {{- else if le $workload_index 9 }}
            {{- $workload_name = print $.Release.Name "0" $workload_index }}
            {{- $conf_workload_name = print "redis0" $workload_index }}
        {{ else }}
            {{- $workload_name = print $.Release.Name $workload_index }}
            {{- $conf_workload_name = print "redis" $workload_index }}
        {{- end }}
    {{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $workload_name }}
spec:
  selector:
    matchLabels:
      redis.workloadselector: {{ $.Release.Namespace}}-{{ $workload_name }}
      redis.releaseselector: {{ $.Release.Namespace}}-{{ $.Release.Name }}
      {{- if hasKey $cluster_groups $workload_name }}
          {{- range $selector,$value := get $cluster_groups $workload_name }}
      {{ $selector }}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- if hasKey $cluster_masters $workload_name }}
          {{- range $selector,$value := get $cluster_masters $workload_name }}
      {{ $selector }}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- range $k,$cluster := get $.Values.redis "redisClusters" | default list }}
          {{- $ports = list }}
          {{- $ports_len = 0 }}
          {{- range $l,$redis_node := $cluster.servers }}
                {{- $node = index (regexSplit ":" $redis_node -1) 0 }}
                {{- $port = (index (regexSplit ":" $redis_node -1) 1) | int }}
                {{- if contains "-" $node }}
                    {{- $node_index = (sub (trimPrefix "redis" (index (regexSplit "-" $node -1) 0) | int) 1) }}
                {{- else }}
                    {{- $node_index = (sub (trimPrefix "redis" $node | int) 1) }}
                {{- end }}
                {{- if and (eq $i $node_index) (not (has $port $ports)) }}
                    {{- $ports = append $ports $port }}
                    {{- $ports_len = add $ports_len 1 }}
                {{- end }}
          {{- end }}
          {{- range $l,$p := $ports  }}
              {{- if eq $ports_len 1 }}
      workload.user.cattle.io/{{ $.Release.Name}}.rediscluster.{{ $cluster.name }}.selector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name}}-rediscluster-{{ $cluster.name }}
              {{- else }}
      workload.user.cattle.io/{{ $.Release.Name}}.rediscluster.{{ $cluster.name }}.{{ $p }}.selector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name}}-rediscluster-{{ $cluster.name }}-{{ $p }}
              {{- end }}
          {{- end}}
      {{- end }}
  podManagementPolicy: OrderedReady
  replicas: {{ $replicas}}
  revisionHistoryLimit: 10
  serviceName: {{ $workload_name }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        redis.workloadselector: {{ $.Release.Namespace}}-{{ $workload_name }}
        redis.releaseselector: {{ $.Release.Namespace}}-{{ $.Release.Name }}
      {{- if hasKey $cluster_groups $workload_name }}
          {{- range $selector,$value := get $cluster_groups $workload_name }}
        {{ $selector }}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- if hasKey $cluster_masters $workload_name }}
          {{- range $selector,$value := get $cluster_masters $workload_name }}
        {{ $selector }}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- range $k,$cluster := get $.Values.redis "redisClusters" | default list }}
          {{- $ports = list }}
          {{- $ports_len = 0 }}
          {{- range $l,$redis_node := $cluster.servers }}
                {{- $node = index (regexSplit ":" $redis_node -1) 0 }}
                {{- $port = (index (regexSplit ":" $redis_node -1) 1) | int }}
                {{- if contains "-" $node }}
                    {{- $node_index = (sub (trimPrefix "redis" (index (regexSplit "-" $node -1) 0) | int) 1) }}
                {{- else }}
                    {{- $node_index = (sub (trimPrefix "redis" $node | int) 1) }}
                {{- end }}
                {{- if and (eq $i $node_index) (not (has $port $ports)) }}
                    {{- $ports = append $ports $port }}
                    {{- $ports_len = add $ports_len 1 }}
                {{- end }}
          {{- end }}
          {{- range $l,$p := $ports  }}
              {{- if eq $ports_len 1 }}
        workload.user.cattle.io/{{ $.Release.Name}}.rediscluster.{{ $cluster.name }}.selector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name}}-rediscluster-{{ $cluster.name }}
              {{- else }}
        workload.user.cattle.io/{{ $.Release.Name}}.rediscluster.{{ $cluster.name }}.{{ $p }}.selector: apps.statefulset-{{ $.Release.Namespace}}-{{ $.Release.Name}}-rediscluster-{{ $cluster.name }}-{{ $p }}
              {{- end }}
          {{- end}}
      {{- end }}
    spec:
      topologySpreadConstraints:
      {{- if hasKey $cluster_groups $workload_name }}
          {{- range $selector,$value := get $cluster_groups $workload_name }}
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        minDomains: 1
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            {{ $selector}}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- if hasKey $cluster_masters $workload_name }}
          {{- range $selector,$value := get $cluster_masters $workload_name }}
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        minDomains: 1
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            {{ $selector}}: {{ $value }}
          {{- end }}
      {{- end }}
      {{- if gt $replicas 1 }}
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        minDomains: 1
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            redis.workloadselector: {{ $.Release.Namespace}}-{{ $workload_name }}
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        minDomains: 1
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            redis.releaseselector: {{ $.Release.Namespace}}-{{ $.Release.Name }}
      {{- end }}
      containers:
        - args:
          - /usr/local/redis/bin/start_redis
          {{- if $.Values.redis.envs }}
          env:
              {{- range $index,$env := $.Values.redis.envs | default dict }}
            - name: {{ $env.name }}
              value: {{ $env.value }}
              {{- end }}
          {{- end }}
          workingDir: /usr/local/redis
          image: {{ $.Values.redis.image }}
          imagePullPolicy: Always
          name: {{ $workload_name }}
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          stdin: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
          - mountPath: /usr/local/redis/bin
            name: redis-scripts
          - mountPath: /usr/local/redis/conf/redis_common.conf
            name: redis-confs
            subPath: redis_common.conf
          {{- range $i,$port := untilStep $start_port $end_port 1 }}
              {{- range $j,$replica_index := until $replicas }}
                  {{- if eq $replicas 1 }}
                      {{- $conf_name = $conf_workload_name }}
                  {{- else if le $replicas 9 }}
                      {{- $conf_name = print $conf_workload_name "_" $replica_index }}
                  {{- else if le $replica_index 9 }}
                      {{- $conf_name = print $conf_workload_name "_0" $replica_index }}
                  {{- else }}
                      {{- $conf_name = print $conf_workload_name "_" $replica_index }}
                  {{- end }}
                  {{- if eq $replicas 1 }}
                      {{- if eq $servers 1 }}
          - mountPath: /usr/local/redis/conf/redis.conf
                      {{- else }}
          - mountPath: /usr/local/redis/{{ $port }}/conf/redis.conf
                      {{- end }}
            name: redis-confs
            subPath: {{ $conf_name }}_{{ $port}}.conf
                  {{- else }}
                      {{- if eq $servers 1 }}
          - mountPath: /usr/local/redis/conf/{{ print $workload_name "-" $replica_index }}/redis.conf
                      {{- else }}
          - mountPath: /usr/local/redis/{{ $port }}/conf/{{ print $workload_name "-" $replica_index }}/redis.conf
                      {{- end }}
            name: redis-confs
            subPath: {{ $conf_name }}_{{ $port}}.conf
                  {{- end }}
              {{- end }}
          {{- end }}
          {{- if $has_storage  }}
              {{- range $i,$port := untilStep $start_port $end_port 1 }}
                  {{- $redisport_conf = (get $.Values.redis (print "redis_" $port ".conf")) | default dict}}
                  {{- $redisserver_conf = (get $.Values.redis (print $conf_workload_name "_" $port ".conf")) | default dict }}
                  {{- $save = (get $redisserver_conf "save") | default (get $redisport_conf "save") | default (get $redis_conf "save") | default "\"\"" }}
                  {{- $appendonly = (get $redisserver_conf "appendonly") | default (get $redisport_conf "appendonly") | default (get $redis_conf "appendonly") | default "no" }}
                  {{- $cluster_enabled = and $has_storage (eq ((get $redisserver_conf "cluster-enabled") | default (get $redisport_conf "cluster-enabled") | default (get $redis_conf "cluster-enabled") | default "no") "yes") }}
                  {{- if not $save }}
                      {{- $save = "\"\"" }}
                  {{- end }}
                  {{- if or (ne $save "\"\"")  (ne $appendonly  "no") $cluster_enabled }}
                      {{- if eq $servers 1 }}
          - mountPath: /usr/local/redis/data
            {{- if eq $replicas 1 }}
            name: redis-data
            {{- else }}
            name: {{ $workload_name}}-data
            {{- end }}
            subPath: data
                      {{- else }}
          - mountPath: /usr/local/redis/{{ $port }}/data
            {{- if eq $replicas 1 }}
            name: redis-data
            {{- else }}
            name: {{ $workload_name}}-data
            {{- end }}
            subPath: {{ $port }}/data
                      {{- end }}
                  {{- end }}
              {{- end }}
              {{- range $i,$port := untilStep $start_port $end_port 1 }}
                  {{- if eq $servers 1 }}
          - mountPath: /usr/local/redis/logs
            {{- if eq $replicas 1 }}
            name: redis-data
            {{- else }}
            name: {{ $workload_name}}-data
            {{- end }}
            subPath: logs
                  {{- else }}
          - mountPath: /usr/local/redis/{{ $port }}/logs
            {{- if eq $replicas 1 }}
            name: redis-data
            {{- else }}
            name: {{ $workload_name}}-data
            {{- end }}
            subPath: {{ $port }}/logs
                  {{- end }}
              {{- end }}
          {{- end }}
          readinessProbe:
            failureThreshold: {{ $readinessProbe.failureThreshold | default 3 }}
            successThreshold: {{ $readinessProbe.successThreshold | default 1 }}
            initialDelaySeconds: {{ $readinessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ add ($.Values.redis.minReadySeconds| default $readinessProbe.timeoutSeconds | default 3) 3 }}
            periodSeconds: {{ add ($.Values.redis.minReadySeconds| default $readinessProbe.timeoutSeconds | default 3) 7 }}
            exec:
              command:
                - /usr/local/redis/bin/redis_readiness
          livenessProbe:
            failureThreshold: {{ $livenessProbe.failureThreshold | default 3 }}
            successThreshold: {{ $livenessProbe.successThreshold | default 1 }}
            initialDelaySeconds: {{ $livenessProbe.initialDelaySeconds | default 0 }}
            timeoutSeconds: {{ $livenessProbe.timeoutSeconds | default 3 }}
            periodSeconds: {{ $livenessProbe.periodSeconds | default 10 }}
            exec:
              command:
                - /usr/local/redis/bin/redis_liveness
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      {{- if $workload.affinity }}
      affinity:
{{ $workload.affinity | toYaml | indent 8 }}
      {{- end }}
      volumes:
      - configMap:
          defaultMode: 365
          name: {{ $.Release.Name }}-scripts
        name: redis-scripts
      - configMap:
          defaultMode: 292
          name: {{ $.Release.Name }}-confs
        name: redis-confs
      {{- if $has_storage  }}
          {{- if eq $replicas 1 }}
      - name: redis-data
        persistentVolumeClaim:
          claimName: {{ $workload_name }}-data
          type: persistentvolumeclaim
          {{- else }}
      securityContext:
        fsGroup: 999
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: {{ $workload_name }}-data
        namespace: {{ $.Release.Namespace }}
      spec:
        accessModes:
          - {{ $.Values.redis.volume.accessMode | default "ReadWriteOnce" }}
        resources:
          requests:
            storage: {{ $.Values.redis.volume.storage}}
        storageClassName: {{ $.Values.redis.volume.storageClassName | default "managed-csi-retain" }}
        volumeMode: {{ $.Values.redis.volume.volumeMode | default "Filesystem" }}
          {{- end }}
      {{- end }}
  updateStrategy:
    rollingUpdate:
      partition: 0
    type: RollingUpdate
{{- end}}
